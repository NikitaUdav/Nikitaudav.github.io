(function (factory) {
  typeof define === 'function' && define.amd ? define('work2', factory) :
  factory();
}((function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  var isObject = function isObject(obj) {
    return _typeof(obj) === "object";
  };

  var a = {
    num: 3,
    den: 9
  };
  var b = {
    num: 2,
    den: 3
  };
  var fraction = {
    format: function format(fraction) {
      if (isObject(fraction)) {
        return "".concat(fraction.num, "/").concat(fraction.den);
      }

      return "Argument isn't a franction";
    },
    divReduction: function divReduction(fraction) {
      var divider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
      var num = Number(fraction.num);
      var den = Number(fraction.den);

      if (!(num % divider) && !(den % divider)) {
        return this.divReduction({
          num: num / divider,
          den: den / divider
        });
      }

      return fraction;
    },
    commonDenominator: function commonDenominator(a, b) {
      if (isObject(a) && isObject(b)) {
        var denMax = Math.max(a.den, b.den);
        var denMin = Math.min(a.den, b.den);
        var den = denMax;

        if (denMax % denMin) {
          den = denMax * denMin;
        }

        return "".concat(a = a.num * (den / a.den), ",").concat(b = b.num * (den / b.den), ",").concat(den);
      } else {
        return "a & b must be an object!";
      }
    },
    sum: function sum(first, second) {
      var args = fraction.commonDenominator(first, second).split(",");
      var result = Number(args[0]) + Number(args[1]);
      return {
        num: result,
        den: args[2]
      };
    },
    difference: function difference(first, second) {
      var args = fraction.commonDenominator(first, second).split(",");
      var result = Number(args[0]) - Number(args[1]);
      return {
        num: result,
        den: args[2]
      };
    },
    multiplication: function multiplication(first, second) {
      if (isObject(a) && isObject(b)) {
        return {
          num: a.num * b.num,
          den: a.den * b.den
        };
      } else {
        return "a & b must be an object!";
      }
    },
    division: function division(first, second) {
      if (isObject(a) && isObject(b)) {
        return {
          num: a.num * b.den,
          den: a.den * b.num
        };
      } else {
        return "a & b must be an object!";
      }
    },
    reduction: function reduction(fraction) {
      if (isObject(fraction)) {
        var num = Number(fraction.num);
        var den = Number(fraction.den);
        var max = Math.max(num, den);
        var min = Math.min(num, den);

        if (!(max % min)) {
          return {
            num: num / min,
            den: den / min
          };
        }

        return this.divReduction(this.divReduction(fraction, 2), 3);
      } else {
        return "Argument isn't a fraction";
      }
    }
  };
  var sum = fraction.multiplication(a, b);
  console.log("MUT: ", sum, fraction.format(sum));
  var reduction = fraction.reduction(sum);
  console.log("RED: ", reduction, fraction.format(reduction));
  sum = fraction.difference(a, b);
  console.log("DIF: ", sum, fraction.format(sum));
  reduction = fraction.reduction(sum);
  console.log("RED: ", reduction, fraction.format(reduction));
  sum = fraction.division(a, b);
  console.log("DIV: ", sum, fraction.format(sum));
  reduction = fraction.reduction(sum);
  console.log("RED: ", reduction, fraction.format(reduction));

})));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
